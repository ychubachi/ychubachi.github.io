<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Home on YC's Blog</title><link>https://ghp.chubachi.net/</link><description>Recent content in Home on YC's Blog</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Sun, 17 Oct 2021 22:35:00 +0900</lastBuildDate><atom:link href="https://ghp.chubachi.net/index.xml" rel="self" type="application/rss+xml"/><item><title>About</title><link>https://ghp.chubachi.net/about/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ghp.chubachi.net/about/</guid><description>Mínimo is a Spanish word that roughly translate to Minimal.
Minimo is a minimalist theme for Hugo.
Minimo keeps the focus on your content and lets it shine!</description></item><item><title>EmacsでものすごくアジャイルにBlogを書く方法</title><link>https://ghp.chubachi.net/post/20211017-223536/</link><pubDate>Sun, 17 Oct 2021 22:35:00 +0900</pubDate><guid>https://ghp.chubachi.net/post/20211017-223536/</guid><description>ブログを書きたいと思ったら、
OrgのCaptureでさくっとエントリーを作成する。 エントリーを書く。 そのエントリーでブログのポストにExportする（ox-hugoを利用）。 1.のとき、必要なプロパティも自動で生成されるのがらくちん。
GitHubにPushするのも簡略化したいな。</description></item><item><title>エキスポートの仕方</title><link>https://ghp.chubachi.net/post/20211017-223202/</link><pubDate>Sun, 17 Oct 2021 22:32:00 +0900</pubDate><guid>https://ghp.chubachi.net/post/20211017-223202/</guid><description>きちんとプロパティがついているエントリーで C-c C-e H H をうつ。 capture-templateをうまく設定することができた。</description></item><item><title>ox-hugoでブログを書く</title><link>https://ghp.chubachi.net/post/2021-10-16/</link><pubDate>Sat, 16 Oct 2021 00:00:00 +0000</pubDate><guid>https://ghp.chubachi.net/post/2021-10-16/</guid><description>最近、Emacsを見直し、org-modeにもどった。 Evernote、Notionなど渡り歩いたが、やはりエディタはEmacs。 Emacsといえばorg-mode。 最近、Emacsを見直し、org-modeにもどった。 Evernote、Notionなど渡り歩いたが、やはりエディタはEmacs。 Emacsといえばorg-mode。
Notionからテキストエディタにコピペができない。
org-modeで書くブログ 最近、Emacsを見直し、org-modeにもどった。 Evernote、Notionなど渡り歩いたが、やはりエディタはEmacs。 Emacsといえばorg-mode。
Hugoについて 以前、Jekyllを触ってみた。 1つのポストで1つファイルを作らなくてはならない。 ファイル名には日付。</description></item><item><title>さよならheml</title><link>https://ghp.chubachi.net/post/2021-10-16-2/</link><pubDate>Sat, 16 Oct 2021 00:00:00 +0000</pubDate><guid>https://ghp.chubachi.net/post/2021-10-16-2/</guid><description>さよならheml hemlが最先端ではなくなっていた。 ミニバッファで日本語がかけないのをなんとかしようと思った。
のりかえ のりかえてみた</description></item><item><title>KaTeX Support</title><link>https://ghp.chubachi.net/docs/katex-support/</link><pubDate>Sun, 12 Aug 2018 12:30:00 +0600</pubDate><guid>https://ghp.chubachi.net/docs/katex-support/</guid><description>KaTeX Syntax for Markdown In your Markdown content, use the katex shortcode for inserting KaTeX. Check documentation for Shortcode: katex.
Here&amp;rsquo;s an example Markdown content:
When {{&amp;lt; katex inline &amp;gt;}} a \ne 0 {{&amp;lt; /katex &amp;gt;}}, there are two solutions to {{&amp;lt; katex &amp;gt;}} ax^2 + bx + c = 0 {{&amp;lt; /katex &amp;gt;}} and they are: {{&amp;lt; katex &amp;gt;}} x = {-b \pm \sqrt{b^2-4ac} \over 2a} {{&amp;lt; /katex &amp;gt;}} Output:</description></item><item><title>Search: Fuse.js</title><link>https://ghp.chubachi.net/docs/search-fuse-js/</link><pubDate>Fri, 06 Jul 2018 01:00:00 +0600</pubDate><guid>https://ghp.chubachi.net/docs/search-fuse-js/</guid><description>Configure Fuse.js Search Client Select Fuse.js as the search client in your config.toml file:
[params.search] client = &amp;#34;fuse&amp;#34;</description></item><item><title>Search: Algolia</title><link>https://ghp.chubachi.net/docs/search-algolia/</link><pubDate>Thu, 05 Jul 2018 23:30:00 +0600</pubDate><guid>https://ghp.chubachi.net/docs/search-algolia/</guid><description>Configure Algolia Search Client Select Algolia as the search client in your config.toml file:
[params.search] client = &amp;#34;algolia&amp;#34; Also, add configuration options for Algolia:
[params.search.algolia] appId = &amp;#34;&amp;#34; indexName = &amp;#34;&amp;#34; searchApiKey = &amp;#34;&amp;#34; params.search.algolia [Map]: appId [String]: Algolia Application ID indexName [String]: Name for Algolia Indices
default: minimo_site searchApiKey [String]: Algolia Search-Only API Key You&amp;rsquo;ll find various information related to your Algolia account in the Algolia Dashboard.</description></item><item><title>Search: Lunr.js</title><link>https://ghp.chubachi.net/docs/search-lunr-js/</link><pubDate>Thu, 05 Jul 2018 20:30:00 +0600</pubDate><guid>https://ghp.chubachi.net/docs/search-lunr-js/</guid><description>Configure Lunr.js Search Client Select Lunr.js as the search client in your config.toml file:
[params.search] client = &amp;#34;lunr&amp;#34; Generate Search Index for Lunr.js Lunr.js will need a search index for searching across your site. So, you&amp;rsquo;ll need to generate that search index for Lunr.js before you deploy your site.
Minimo comes with a script for generating the search index for Lunr.js: /scripts/generate-search-index-lunr.js.
Install Dependencies Node.js must be installed on your system for using the generator script.</description></item><item><title>Search Support</title><link>https://ghp.chubachi.net/docs/search-support/</link><pubDate>Thu, 05 Jul 2018 20:00:00 +0600</pubDate><guid>https://ghp.chubachi.net/docs/search-support/</guid><description>Minimo supports the following clients for the search feature:
Algolia Fuse.js Lunr.js Follow the following steps for enabling search in your site.
Create Search Page First of all, you&amp;rsquo;ll need to create a search page.
Create a markdown file under /content/page/ directory with the filename search. If your site is multilingual, you can include language code in the filename. For example:
/content/page/search.md /content/page/search.en.md Add the following options in the frontmatter:</description></item><item><title>Basic HTML Elements</title><link>https://ghp.chubachi.net/post/basic-elements/</link><pubDate>Mon, 16 Apr 2018 00:00:00 +0000</pubDate><guid>https://ghp.chubachi.net/post/basic-elements/</guid><description>&lt;p>The main purpose of this article is to make sure that all basic HTML Elements are decorated with CSS so as to not miss any possible elements when creating new themes for Hugo.&lt;/p></description></item><item><title>Comments Support</title><link>https://ghp.chubachi.net/docs/comments-support/</link><pubDate>Thu, 29 Mar 2018 09:00:00 +0600</pubDate><guid>https://ghp.chubachi.net/docs/comments-support/</guid><description>Minimo has support for comments baked into it.
Enable/Disable Comments Globally For enabling or disabling comments globally, check the following setting in your config.toml file:
[params.comments] enable = false params.comments [Map]: enable [Boolean]: Enable/Disable comments globally For Specific Posts The global .Site.Params.comments.enable setting can be overridden for specific posts in their content&amp;rsquo;s frontmatter with this option:
--- comments: true --- comments [Boolean]: Enable/Disable comments for specific posts Of course, you&amp;rsquo;ll also need to setup a comment system ( Disqus or Staticman ).</description></item><item><title>Emoji Support</title><link>https://ghp.chubachi.net/docs/emoji-support/</link><pubDate>Tue, 27 Feb 2018 21:00:00 +0600</pubDate><guid>https://ghp.chubachi.net/docs/emoji-support/</guid><description>First of all, if you really want emojis, set the enableEmoji setting to true in your config.toml file:
enableEmoji = true This will enable Hugo to find Emoji Shorthands in your content files and render them as Unicode Emoji Characters.
For example:
No, it&amp;rsquo;ll probably not be that colorful! Unless your device&amp;rsquo;s operating system natively supports colorful emojis, you will see a black &amp;amp; white one instead. 🔥
✏️ For getting that colorful look, you will have to add this to your content&amp;rsquo;s frontmatter:</description></item><item><title>MathJax Support</title><link>https://ghp.chubachi.net/docs/mathjax-support/</link><pubDate>Tue, 27 Feb 2018 18:00:00 +0600</pubDate><guid>https://ghp.chubachi.net/docs/mathjax-support/</guid><description>For enabling MathJax, add this to your content&amp;rsquo;s frontmatter:
--- mathjax: true --- MathJax Syntax for Markdown In your Markdown content, use \\(&amp;hellip;\\) delimiters for in-line mathematics.
For mathematics blocks you can use either $$&amp;hellip;$$ or \\[&amp;hellip;\\] as delimiters.
Here&amp;rsquo;s an example Markdown content:
When \\( a \ne 0 \\), there are two solutions to $$ ax^2 + bx + c = 0 $$ and they are: \\[ x = {-b \pm \sqrt{b^2-4ac} \over 2a} \\] Output:</description></item><item><title>Sidebar</title><link>https://ghp.chubachi.net/docs/sidebar/</link><pubDate>Wed, 07 Feb 2018 19:15:00 +0600</pubDate><guid>https://ghp.chubachi.net/docs/sidebar/</guid><description>Enabling Sidebar For enabling Sidebar, use the following configuration options in your config.toml file:
[params.sidebar] enable = true params.sidebar [Map]: enable [Boolean]: Switch for enabling sidebar Adding Widgets to Sidebar For adding Widgets to the Sidebar, check the Widgets documentation.</description></item><item><title>Widgets</title><link>https://ghp.chubachi.net/docs/widgets/</link><pubDate>Wed, 07 Feb 2018 18:30:00 +0600</pubDate><guid>https://ghp.chubachi.net/docs/widgets/</guid><description>Minimo supports Widgets that you can place on specific Widget Areas.
Available Widgets Minimo has the following built-in Widgets:
Name Slug About | about Breadcrumbs | breadcrumbs Recent Posts | recent_posts Search | search Sidebar Menu | sidebar_menu Social Menu | social_menu Taxonomy Cloud | taxonomy_cloud Widget Configuration Options Here are the configuration options available for the Widgets:
Widget: About about [Map]: title [String]: Title</description></item><item><title>Shortcodes</title><link>https://ghp.chubachi.net/docs/shortcodes/</link><pubDate>Thu, 05 Oct 2017 20:00:00 +0600</pubDate><guid>https://ghp.chubachi.net/docs/shortcodes/</guid><description>Minimo comes with several shortcodes built-in.
Shortcode: center Center align you content.
center: Parameters Markdown content between opening and closing tags. center: Usage Example {{&amp;lt; center &amp;gt;}} _Center Aligned Text_ {{&amp;lt; /center &amp;gt;}} Output:
Center Aligned Text Shortcode: convo Renders conversation blocks.
convo: Parameters sep [String] (optional): seperator between person and text (default: &amp;ldquo;:&amp;quot;) convo: Inner Syntax person :: text You can remove the person part, if you want.</description></item><item><title>Cover Image</title><link>https://ghp.chubachi.net/docs/cover-image/</link><pubDate>Sat, 30 Sep 2017 14:00:00 +0600</pubDate><guid>https://ghp.chubachi.net/docs/cover-image/</guid><description>You can add cover image to your contents with the cover paramameter in the content&amp;rsquo;s front-matter.
You can directly provide the image url:
--- cover: /images/eden-farm-children-s-village.jpg --- cover [String]: path/url of the cover image Or you can provide additional information:
--- cover: image: /images/eden-farm-children-s-village.jpg alternate: Picture of a yellow wall with a blue window in the upper-left corner caption: Eden Farm Children&amp;#39;s Village by Gareth Harper on Unsplash style: full --- cover [Map]: image [String]: path/url of the cover image alternate [String]: alternate text for the image caption [String]: caption for the cover image style [String]: full / wide / normal</description></item><item><title>Translation Support</title><link>https://ghp.chubachi.net/docs/translation/</link><pubDate>Wed, 27 Sep 2017 14:00:00 +0600</pubDate><guid>https://ghp.chubachi.net/docs/translation/</guid><description>You can translate Minimo in your own language!
For example, if you want to translate Minimo in Spanish, you will have to add this to your site&amp;rsquo;s config file:
[languages.es] lang = &amp;#34;es&amp;#34; languageName = &amp;#34;Spanish&amp;#34; weight = 1 Then create a folder named /i18n/ in your site&amp;rsquo;s root. And create a file /i18n/es.toml with the translated strings.
For reference template you can see the en.toml file.
If you want your translation file to be included in Minimo repository, feel free to create a pull request.</description></item><item><title>Syntax Highlighting</title><link>https://ghp.chubachi.net/docs/syntax-highlighting/</link><pubDate>Wed, 27 Sep 2017 12:00:00 +0600</pubDate><guid>https://ghp.chubachi.net/docs/syntax-highlighting/</guid><description>Hugo uses Chroma as it&amp;rsquo;s built-in syntax-highlighter.
For detailed information about Syntax Highlighting in Hugo, check the Hugo&amp;rsquo;s Syntax Highlighting Documentation.</description></item><item><title>Menus Setup Guide</title><link>https://ghp.chubachi.net/docs/menus/</link><pubDate>Wed, 27 Sep 2017 10:00:00 +0600</pubDate><guid>https://ghp.chubachi.net/docs/menus/</guid><description>Minimo has three menus.
Main Menu Sidebar Menu Social Menu Main Menu name: main
Main menu is located at the top of the site.
Check Hugo&amp;rsquo;s Menus Documentation for information about managing this menu.
You can hide the Main Menu using the following option in your config.toml file:
[params.settings] hideMainMenu = true Sidebar Menu name: sidebar
Social Menu is available as Widget: sidebar_menu. Add it to the sidebar Widget Area to use it.</description></item><item><title>Opengraph Support</title><link>https://ghp.chubachi.net/docs/opengraph/</link><pubDate>Tue, 26 Sep 2017 08:00:00 +0600</pubDate><guid>https://ghp.chubachi.net/docs/opengraph/</guid><description>Minimo has built-in support for Opengraph tags. It will pick up most of the things from your contents' front-matters &amp;amp; Hugo configuration.
You can use these options in you content&amp;rsquo;s front-matter:
--- audios: [] # for og:audio tags images: [] # for og:image tags videos: [] # for og:video tags --- audios [Array of Strings]: path/url of audio files images [Array of Strings]: path/url of image files videos [Array of Strings]: path/url of video files N.</description></item><item><title>Authors Setup Guide</title><link>https://ghp.chubachi.net/docs/authors/</link><pubDate>Tue, 26 Sep 2017 06:00:00 +0600</pubDate><guid>https://ghp.chubachi.net/docs/authors/</guid><description>Minimo supports multiple authors for your site. Just make sure you have the following configuration in your site&amp;rsquo;s config.toml:
[taxonomies] author = &amp;#34;authors&amp;#34; Minimo treats Authors as a Hugo Taxonomy.
Author&amp;rsquo;s Profile For adding an author to your site:
Create data/authors folder in your site&amp;rsquo;s root directory Create a file with the filename format: &amp;lt;username&amp;gt;.toml Now, add information about the author using the structure below:
/data/authors/muniftanjim.toml
id = &amp;#34;muniftanjim&amp;#34; [email] username = &amp;#34;muniftanjim&amp;#34; host = &amp;#34;gmail.</description></item><item><title>Configuration File: config.toml</title><link>https://ghp.chubachi.net/docs/config-file/</link><pubDate>Mon, 25 Sep 2017 08:00:00 +0600</pubDate><guid>https://ghp.chubachi.net/docs/config-file/</guid><description>This is the Minimo&amp;rsquo;s configuration file ( config.toml ) file of this site:
baseURL = &amp;#34;https://ghp.chubachi.net&amp;#34; title = &amp;#34;YC&amp;#39;s Blog&amp;#34; # for smart copyright line, leave this blank and check [params.copyright] # copyright = &amp;#34;&amp;#34; theme = &amp;#34;minimo&amp;#34; disqusShortname = &amp;#34;&amp;#34; googleAnalytics = &amp;#34;&amp;#34; Paginate = 5 preserveTaxonomyNames = true enableRobotsTXT = true # generate robots.txt # Syntax Highlighting ( https://gohugo.io/content-management/syntax-highlighting/ ) pygmentsCodefences = true enableEmoji = true # Missing translations will default to this content language defaultContentLanguage = &amp;#34;en&amp;#34; [params.</description></item><item><title>Updating Guide</title><link>https://ghp.chubachi.net/docs/updating/</link><pubDate>Mon, 25 Sep 2017 06:00:00 +0600</pubDate><guid>https://ghp.chubachi.net/docs/updating/</guid><description>Updating Minimo Update Minimo clone Just replace the themes/minimo folder with the latest version of Minimo clone, i.e. delete the old folder and clone again:
rm -rf themes/minimo git clone --depth 1 https://github.com/MunifTanjim/minimo themes/minimo Then, commit the changes:
git add themes/minimo git commit -m &amp;#34;update [theme]: minimo&amp;#34; Update Minimo submodule cd themes/minimo git checkout master git fetch &amp;amp;&amp;amp; git pull cd ../.. git add themes/minimo git commit -m &amp;#34;update [theme]: minimo&amp;#34; To Do After Updating Minimo After updating Minimo, always check that your site&amp;rsquo;s config.</description></item><item><title>Installation Guide</title><link>https://ghp.chubachi.net/docs/installation/</link><pubDate>Mon, 25 Sep 2017 02:00:00 +0600</pubDate><guid>https://ghp.chubachi.net/docs/installation/</guid><description>First of all you will need to setup a Hugo site. You can follow the Hugo&amp;rsquo;s Quick Start Guide for that.
After you&amp;rsquo;re done with that, it&amp;rsquo;s time for installing Minimo!
Installing Minimo There are two different ways you can install Minimo:
As clone As submodule The second method is recommended.
Install Minimo as clone With this method, you will simply clone it. And a copy of Minimo&amp;rsquo;s repository will be stored with the rest of you site.</description></item><item><title>新しいテーマの作り方</title><link>https://ghp.chubachi.net/post/creating-a-new-theme/</link><pubDate>Sun, 28 Sep 2014 00:00:00 +0000</pubDate><guid>https://ghp.chubachi.net/post/creating-a-new-theme/</guid><description>Introduction This tutorial will show you how to create a simple theme in Hugo. I assume that you are familiar with HTML, the bash command line, and that you are comfortable using Markdown to format content. I&amp;rsquo;ll explain how Hugo uses templates and how you can organize your templates to create a theme. I won&amp;rsquo;t cover using CSS to style your theme.
We&amp;rsquo;ll start with creating a new site with a very basic template.</description></item><item><title>About this Blog</title><link>https://ghp.chubachi.net/about/</link><pubDate>Wed, 09 Apr 2014 00:00:00 +0000</pubDate><guid>https://ghp.chubachi.net/about/</guid><description>Hugo is a static site engine written in Go.
It makes use of a variety of open source projects including:
Cobra Viper J Walter Weatherman Cast Learn more and contribute on GitHub.
Setup Some fun facts about Hugo:
Built in Go Loosely inspired by Jekyll Primarily developed by spf13 on the train while commuting to and from Manhattan. Coded in Vim using spf13-vim Have questions or suggestions?</description></item><item><title>(Hu)go Template Primer</title><link>https://ghp.chubachi.net/post/goisforlovers/</link><pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate><guid>https://ghp.chubachi.net/post/goisforlovers/</guid><description>&lt;p>Hugo uses the excellent &lt;a href="https://golang.org/">Go&lt;/a> &lt;a href="https://golang.org/pkg/html/template/">html/template&lt;/a> library for
its template engine. It is an extremely lightweight engine that provides a very
small amount of logic. In our experience that it is just the right amount of
logic to be able to create a good static website. If you have used other
template systems from different languages or frameworks you will find a lot of
similarities in Go templates.&lt;/p></description></item><item><title>Getting Started with Hugo</title><link>https://ghp.chubachi.net/post/hugoisforlovers/</link><pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate><guid>https://ghp.chubachi.net/post/hugoisforlovers/</guid><description>Step 1. Install Hugo Go to Hugo releases and download the appropriate version for your OS and architecture.
Save it somewhere specific as we will be using it in the next step.
More complete instructions are available at Install Hugo
Step 2. Build the Docs Hugo has its own example site which happens to also be the documentation site you are reading right now.
Follow the following steps:
Clone the Hugo repository Go into the repo Run hugo in server mode and build the docs Open your browser to http://localhost:1313 Corresponding pseudo commands:</description></item><item><title>Migrate to Hugo from Jekyll</title><link>https://ghp.chubachi.net/post/migrate-from-jekyll/</link><pubDate>Mon, 10 Mar 2014 00:00:00 +0000</pubDate><guid>https://ghp.chubachi.net/post/migrate-from-jekyll/</guid><description>Move static content to static Jekyll has a rule that any directory not starting with _ will be copied as-is to the _site output. Hugo keeps all static content under static. You should therefore move it all there. With Jekyll, something that looked like
▾ &amp;lt;root&amp;gt;/ ▾ images/ logo.png should become
▾ &amp;lt;root&amp;gt;/ ▾ static/ ▾ images/ logo.png Additionally, you&amp;rsquo;ll want any files that should reside at the root (such as CNAME) to be moved to static.</description></item><item><title>Search</title><link>https://ghp.chubachi.net/search/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ghp.chubachi.net/search/</guid><description/></item></channel></rss>